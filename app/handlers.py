from aiogram import types, Router,F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import LinkPreviewOptions
from decouple import config

import app.keyboard as keyboards
import app.parcer as parc
import datetime

#############################################

router = Router()

class Form(StatesGroup):
    need_currency = State()


##################### –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ########################

@router.message(Command('start'))
async def start_menu(message: types.Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n'
        f'–≠—Ç–æ—Ç –±–æ—Ç –¥–æ–ª–∂–µ–Ω —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ –≤–∞–ª—é—Ç –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n–û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–∞–º!',
        reply_markup=keyboards.main_keyboard
    )
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüëë",reply_markup=keyboards.main_admin_keyboard)

@router.message(Command("stocks"))
@router.message(F.text == '–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–πüåê')
async def Market_stocks(message: types.Message):
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–∑ –º–∏—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?‚úç",reply_markup=keyboards.stocks_keyboard)

@router.message(Command("menu"))
@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©")
async def return_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –í–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüë®üèª‚Äçüíª", reply_markup=keyboards.main_keyboard)
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüëë",reply_markup=keyboards.main_admin_keyboard)

@router.message(Command('cancel'))
async def choose_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—åüíÄ", reply_markup=keyboards.main_keyboard)
        return
    
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚õî",reply_markup=keyboards.main_keyboard)

################# –ö—É—Ä—Å –≤–∞–ª—é—Ç(–¶–ë –†–§)üèõÔ∏è############################

############## –ú–∏—Ä–æ–≤—ã–µ –í–∞–ª—é—Ç—ã################# 

@router.message(Command('currency'))
@router.message(F.text == '–ö—É—Ä—Å –≤–∞–ª—é—Ç(–¶–ë –†–§)üèõÔ∏è')
async def world_currency(message: types.Message):
    info_world_currency = parc.get_all_currency()
    if info_world_currency == "error_status":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.main_keyboard)
        if message.from_user.id == int(config("Admin_ID")):
            await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–º–æ–Ω—Çüõ†Ô∏è",reply_markup=keyboards.main_admin_keyboard)
    else:
        for item in info_world_currency:
            '''
            —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ info_world_currency
            [['840', 'USD', '1', '–î–æ–ª–ª–∞—Ä –°–®–ê', '87,9595'],...]
            '''
            —Åurrency_codename = item[1]
            currency_nums = item[2]
            currency_name = item[3]
            currency_value = item[4]
            

            await message.answer(f"üíµ{currency_nums} {—Åurrency_codename} (<b>{currency_name}</b>) ‚Äî <u><b>{currency_value}‚ÇΩ</b></u>",
            reply_markup=keyboards.main_keyboard,parse_mode="HTML")
        if message.from_user.id == int(config("Admin_ID")):
            await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüëë",reply_markup=keyboards.main_admin_keyboard)


#################################################################

################# –†—ã–Ω–æ–∫ –∞–∫—Ü–∏–πüåê ################################

@router.message(F.text == "–í–∑–ª–µ—Ç—ã –¥–Ω—èüíπ")
async def give_up_stocks(message: types.Message):
    info_stocks = parc.growth_stocks()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    if info_stocks == "error_status":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for stock in info_stocks:
            Code_name = stock[0][:4]
            Full_name = stock[0][4:]
            Change_percent = stock[1]
            Price = stock[2]
            Subject = stock[10]
            await message.answer(f'(<b>{Code_name}</b>) {Full_name} ({Subject}) -> \n\n'
            f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –Ω–∞ <u><b>{Change_percent}</b></u>‚Üó -> \n\n<u>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>{Price}</b></u>', parse_mode="HTML")

        await message.answer(f"üòé–í–æ—Ç –ø–µ—Ä–≤—ã–µ <u><b>10</b></u> –ø–æ–∑–∏—Ü–∏–π –≤ –ª–∏–¥–µ—Ä–∞—Ö —Ä–æ—Å—Ç–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}",reply_markup=keyboards.stocks_keyboard,parse_mode="HTML")

@router.message(F.text == '–ü–∞–¥–µ–Ω–∏—è –¥–Ω—èüìâ')
async def give_down_stocks(message: types.Message):
    inf_stock = parc.drop_stocks()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    if inf_stock == "error_status":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for stock in inf_stock:
            Code_name = stock[0][:4]
            Full_name = stock[0][4:]
            Change_percent = stock[1]
            Price = stock[2]
            Subject = stock[10]
            await message.answer(f'(<b>{Code_name}</b>) {Full_name} ({Subject}) -> \n\n'
            f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –Ω–∞ <u><b>{Change_percent}</b></u>‚¨á -> \n\n<u>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>{Price}</b></u>', parse_mode="HTML")

        await message.answer(f"üòí–í–æ—Ç –ø–µ—Ä–≤—ã–µ <u><b>10</b></u> –ø–æ–∑–∏—Ü–∏–π –≤ –ª–∏–¥–µ—Ä–∞—Ö –ø–∞–¥–µ–Ω–∏—è„ÄΩ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}",reply_markup=keyboards.stocks_keyboard,parse_mode="HTML")


################## –°—ã—Ä—å–µ ########################################

@router.message(F.text == "–†—ã–Ω–æ–∫ –°—ã—Ä—å—è‚õèÔ∏è")
async def menu_material(message: types.Message):
    await message.answer("–ö–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ <u><b>–§—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö</b></u>", 
        reply_markup=keyboards.material_keyboard, parse_mode="HTML")

@router.message(F.text =="–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞‚ö°")
async def get_energy(message: types.Message):
    energy_data = parc.energy()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    if energy_data == "error_status":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for info_list in energy_data:
            name = info_list[0]
            price,change_day,percent = info_list[1]

            await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ <u>{name.capitalize()}</u> –∑–∞ –¥–µ–Ω—å <u>–∏–∑–º–µ–Ω–∏–ª–∞—Å—å</u> –Ω–∞ <b>{change_day}$</b> (<u><b>{percent}</b></u>)."
                f"->\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - <u><b>{price}$</b></u>", parse_mode="HTML")
        await message.answer(f"–í–æ—Ç <u><b>6</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å—ë –≤ <u>—Å—Ñ–µ—Ä–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏</u> –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.\n\n–í—Å–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö$$$",
            reply_markup=keyboards.material_keyboard,parse_mode="HTML")

@router.message(F.text == "–ú–µ—Ç–∞–ª–ª—ãüî©")
async def get_metall(message: types.Message):
    metall_data = parc.metall()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    if metall_data == "error_status":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for info_list in metall_data:
            name = info_list[0]
            price,change_day,percent = info_list[1]

            await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ <u>{name.capitalize()}</u> –∑–∞ –¥–µ–Ω—å <u>–∏–∑–º–µ–Ω–∏–ª–∞—Å—å</u> –Ω–∞ <b>{change_day}$</b> (<u><b>{percent}</b></u>)."
                f"->\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - <u><b>{price}$</b></u>", parse_mode="HTML")
        await message.answer(f"–í–æ—Ç <u><b>5</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å—ë –≤ <u>—Å—Ñ–µ—Ä–µ –º–µ—Ç–∞–ª–ª–æ–≤</u> –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.\n\n–í—Å–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö$$$",
            reply_markup=keyboards.material_keyboard,parse_mode="HTML")

@router.message(F.text == "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑. üå±")
async def get_agriculture(message: types.Message):
    agriculture_data = parc.agriculture()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    if agriculture_data == "error_status":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for info_list in agriculture_data:
            name = info_list[0]
            price,change_day,percent = info_list[1]

            await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ <u>{name.capitalize()}</u> –∑–∞ –¥–µ–Ω—å <u>–∏–∑–º–µ–Ω–∏–ª–∞—Å—å</u> –Ω–∞ <b>{change_day}$</b> (<u><b>{percent}</b></u>)."
                f"->\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - <u><b>{price}$</b></u>", parse_mode="HTML")
        await message.answer(f"–í–æ—Ç <u><b>6</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å—ë –≤ <u>—Å—Ñ–µ—Ä–µ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞</u> –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.\n\n–í—Å–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö$$$",
            reply_markup=keyboards.material_keyboard,parse_mode="HTML")

@router.message(F.text == "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å‚öôÔ∏è")
async def get_industry(message: types.Message):
    industry_data = parc.industry()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    if industry_data == "error_status":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for info_list in industry_data:
            name = info_list[0]
            price,change_day,percent = info_list[1]

            await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ <u>{name.capitalize()}</u> –∑–∞ –¥–µ–Ω—å <u>–∏–∑–º–µ–Ω–∏–ª–∞—Å—å</u> –Ω–∞ <b>{change_day}$</b> (<u><b>{percent}</b></u>)."
                f"->\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - <u><b>{price}$</b></u>", parse_mode="HTML")
        await message.answer(f"–í–æ—Ç <u><b>6</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å—ë –≤ <u>—Å—Ñ–µ—Ä–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</u> –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.\n\n–í—Å–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö$$$",
            reply_markup=keyboards.material_keyboard,parse_mode="HTML")

################## –ö—Ä–∏–ø—Ç–∞ ########################################

@router.message(F.text == "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Çø")
async def give_crypto(message: types.Message):
    names_crypto,prices_crypto = parc.crypto()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    if names_crypto == "error_status1":
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for index in range(5):
            await message.answer(f"–¶–µ–Ω–∞ <u><b>{names_crypto[index]}</b></u> –Ω–∞ —Ä—ã–Ω–∫–µ —Ä–∞–≤–Ω–∞ ‚Äî <u><b>{prices_crypto[index]} $</b></u>",parse_mode="HTML")

        await message.answer(f"–í–æ—Ç <u><b>5</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.",
            reply_markup=keyboards.stocks_keyboard,parse_mode="HTML")

################## –ò–Ω–¥–µ–∫—Å—ã ######################################

@router.message(F.text == "–ò–Ω–¥–µ–∫—Å—ã –±–∏—Ä–∂üìäüìà")
async def give_index(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ωüåé",reply_markup=keyboards.indices_keyboard)

@router.callback_query(F.data == "EU")    
async def indices_europe(callback: types.CallbackQuery):
    await callback.message.delete()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    europe_names_index, europe_prices_index, europe_change_index, europe_change_percent = parc.index_europe()
    countries = ["–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "–ì–µ—Ä–º–∞–Ω–∏—è","–§—Ä–∞–Ω—Ü–∏—è","–ò—Ç–∞–ª–∏—è","–ò—Å–ø–∞–Ω–∏—è","–†–æ—Å—Å–∏—è","–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "–¢—É—Ä—Ü–∏—è","–®–≤–µ–π—Ü–∞—Ä–∏—è", "–®–≤–µ—Ü–∏—è"]

    if europe_names_index == "error_status1":
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for counter in range(10):
            await callback.message.answer(f'–ë–∏—Ä–∂–∞ <u>{europe_names_index[counter]}</u>({countries[counter]}) –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–∞ –¥–µ–Ω—å –Ω–∞ <u><b>{europe_change_index[counter]}</b></u> –ø—É–Ω–∫—Ç–∞ (<b>{europe_change_percent[counter]}</b>).\n\n'
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞ ‚Äî <u><b>{europe_prices_index[counter]}</b></u> –ø—É–Ω–∫—Ç–æ–≤.",parse_mode="HTML")
        await callback.message.answer(f"‚ú®–í–æ—Ç <u><b>10</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã –±–∏—Ä–∂ —Å—Ç—Ä–∞–Ω –ï–≤—Ä–æ–ø—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.",parse_mode="HTML",reply_markup=keyboards.stocks_keyboard)

@router.callback_query(F.data == "USA")
async def indices_USA(callback: types.CallbackQuery):
    await callback.message.delete()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    usa_names_index, usa_prices_index, usa_change_index, usa_change_percent = parc.index_USA()

    if usa_names_index == "error_status1":
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for counter in range(3):
            await callback.message.answer(f'–ë–∏—Ä–∂–∞ <u>{usa_names_index[counter]}</u> –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–∞ –¥–µ–Ω—å –Ω–∞ <u><b>{usa_change_index[counter]}</b></u> –ø—É–Ω–∫—Ç–∞ (<b>{usa_change_percent[counter]}</b>).\n\n'
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞ ‚Äî <u><b>{usa_prices_index[counter]}</b></u> –ø—É–Ω–∫—Ç–æ–≤.",parse_mode="HTML")
        await callback.message.answer(f"‚ú®–í–æ—Ç <u><b>3</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã –±–∏—Ä–∂ –°–®–ê –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.",parse_mode="HTML",reply_markup=keyboards.stocks_keyboard)

@router.callback_query(F.data == "Asia")
async def indices_Asia(callback: types.CallbackQuery):
    await callback.message.delete()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    asia_names_index, asia_prices_index, asia_change_index, asia_change_percent = parc.index_Asia()
    countries = ["–Ø–ø–æ–Ω–∏—è", "–ö–∏—Ç–∞–π","–ö–∏—Ç–∞–π","–ö–∏—Ç–∞–π","–ö–∏—Ç–∞–π","–ò–Ω–¥–∏—è","–ë–∞–Ω–≥–ª–∞–¥–µ—à", "–°–∏–Ω–≥–∞–ø—É—Ä"]

    if asia_names_index == "error_status1":
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µüîß",reply_markup=keyboards.stocks_keyboard)
    else:
        for counter in range(8):
            await callback.message.answer(f'–ë–∏—Ä–∂–∞ <u>{asia_names_index[counter]}</u>({countries[counter]}) –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–∞ –¥–µ–Ω—å –Ω–∞ <u><b>{asia_change_index[counter]}</b></u> –ø—É–Ω–∫—Ç–∞ (<b>{asia_change_percent[counter]}</b>).\n\n'
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞ ‚Äî <u><b>{asia_prices_index[counter]}</b></u> –ø—É–Ω–∫—Ç–æ–≤.",parse_mode="HTML")
        await callback.message.answer(f"‚ú®–í–æ—Ç <u><b>8</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã –±–∏—Ä–∂ —Å—Ç—Ä–∞–Ω –ê–∑–∏–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.",parse_mode="HTML",reply_markup=keyboards.stocks_keyboard)
##########################################################

################# –≠–∫–æ–Ω–æ–º–∏–∫–∞ –†–§ ################################

@router.message(F.text == "–≠–∫–æ–Ω–æ–º–∏–∫–∞ –†–§")
async def main_menu_economy(message:types.Message):
    current_time = datetime.datetime.now().strftime("%d-%m-%Y %H:%M")
    await message.answer(f"–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ <b>—ç–∫–æ–Ω–æ–º–∏–∫–∏ –†–§</b> –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏: {current_time}",
    reply_markup=keyboards.economy_Rus,parse_mode="HTML")

@router.message(F.text == "–ò–Ω—Ñ–ª—è—Ü–∏—è")
async def get_inflation(message: types.Message):
    data = parc.inflation()

    await message.answer(f"–ò–Ω—Ñ–ª—è—Ü–∏—è –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {list(data['–ò–Ω—Ñ–ª—è—Ü–∏—è'].keys())[1]} (–¶–ë –†–§) —Ä–∞–≤–Ω–∞ - <u><b>{data["–ò–Ω—Ñ–ª—è—Ü–∏—è"][list(data['–ò–Ω—Ñ–ª—è—Ü–∏—è'].keys())[1]]}</b></u>", 
    parse_mode = "HTML")
    await message.answer(f"–¶–µ–ª—å –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –¶–ë –†–§ —Ä–∞–≤–Ω–∞ - <u><b>{data["–ò–Ω—Ñ–ª—è—Ü–∏—è"][list(data['–ò–Ω—Ñ–ª—è—Ü–∏—è'].keys())[0]]}</b></u>", parse_mode="HTML")
    await message.answer(f"–ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ —Ä–∞–≤–Ω–æ - <u><b>{data["–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]}</b></u>",
    parse_mode="HTML", reply_markup=keyboards.economy_Rus)

@router.message(F.text == "–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞")
async def unemployment(message: types.Message):
    pass

##########################################################

################# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìú ################################

@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìú")
async def get_info(message : types.Message):
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ç-–ø—Ä–æ–µ–∫—Ç. –•–æ—Ç–µ–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —Ä—ã–Ω–∫—É –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n\n"
    "github —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - <u>https://github.com/SyntaxSultan-eng</u> (–ü–æ–∫–∞ —Ç–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–æ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è)", reply_markup=keyboards.Information_kb, parse_mode="HTML")

@router.message(F.text == "–í–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ü§ñ")
async def versions(message: types.Message):
    await message.answer("–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - <u><b>0.3version</b></u> (–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: 13.08.2024  20:09)\n\n"
    "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - <u><b>0.2version</b></u> (–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: 13.08.2024  20:09)\n\n"
    "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - <u><b>0.1.5version</b></u> (–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: 12.08.2024  19:32)\n\n"
    "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - <u><b>0.1.1version</b></u> (–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: 12.08.2024  18:19)\n\n"
    "–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - <u><b>0.1version</b></u> (–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: 12.07.2024  20:46)",reply_markup=keyboards.Information_kb,parse_mode="HTML")

###################### –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞üëë ###################################

@router.message(F.text == "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞üëë")
async def admin(message: types.Message):
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer("–ü—É–Ω–∫—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—èüïπÔ∏è",reply_markup=keyboards.admin_panel)

@router.message(F.text == "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥üìã")
async def check_admin_command(message: types.Message):
    if message.from_user.id == int(config("Admin_ID")):
        status = parc.admin_info()
        work_or_not = ["–ù–µ –†–∞–±–æ—Ç–∞–µ—Ç‚ùó","–†–∞–±–æ—Ç–∞–µ—Ç‚úîÔ∏è"]
        all_function = ["–ö—É—Ä—Å –≤–∞–ª—é—Ç(–¶–ë –†–§)üèõÔ∏è",'–í–∑–ª–µ—Ç—ã –¥–Ω—èüíπ',"–ü–∞–¥–µ–Ω–∏—è –¥–Ω—èüìâ","–†—ã–Ω–æ–∫ –°—ã—Ä—å—è‚õèÔ∏è","–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Çø","–ò–Ω–¥–µ–∫—Å—ã –±–∏—Ä–∂üìäüìà"]
        answer = ''

        for item in range(len(status)):
            answer += f'{all_function[item]} ‚Äî {work_or_not[int(status[item])]}\n\n'
    await message.answer(answer,reply_markup=keyboards.admin_panel)

@router.message(F.text == "–û—Ç–∫–ª—é—á–∏—Ç—å/–í–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é")
async def admin_root(message: types.Message):
    if message.from_user.id == int(config("Admin_ID")):
        await message.answer("–í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤–∫–ª/–≤—ã–∫–ª.", reply_markup=keyboards.toggle_panel)

@router.callback_query(F.data == "currency")
async def switch_currency(callback: types.CallbackQuery):
    await callback.message.delete()

    switch = ["OFF", "ON"]
    result = parc.admin_currency_switch()

    await callback.message.answer(f"–§—É–Ω–∫—Ü–∏—è (–ö—É—Ä—Å –≤–∞–ª—é—Ç(–¶–ë –†–§)üèõÔ∏è) –∏–∑–º–µ–Ω–∏–ª–∞ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ <u><b>{switch[int(result)]}</b></u>üíª",
    parse_mode="HTML",reply_markup=keyboards.admin_panel)

@router.callback_query(F.data == 'up')
async def switch_up_stocks(callback: types.CallbackQuery):
    await callback.message.delete()

    switch = ["OFF","ON"]
    result = parc.admin_stocks_up_switch()

    await callback.message.answer(f"–§—É–Ω–∫—Ü–∏—è (–í–∑–ª–µ—Ç—ã –¥–Ω—èüíπ) –∏–∑–º–µ–Ω–∏–ª–∞ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ <u><b>{switch[int(result)]}</b></u>üíª",
    parse_mode="HTML",reply_markup=keyboards.admin_panel)

@router.callback_query(F.data =="down")
async def switch_down_stocks(callback: types.CallbackQuery):
    await callback.message.delete()

    switch = ["OFF", "ON"]
    result = parc.admin_stocks_down_switch()

    await callback.message.answer(f"–§—É–Ω–∫—Ü–∏—è (–ü–∞–¥–µ–Ω–∏—è –¥–Ω—èüìâ) –∏–∑–º–µ–Ω–∏–ª–∞ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ <u><b>{switch[int(result)]}</b></u>üíª",
    parse_mode="HTML",reply_markup=keyboards.admin_panel)

@router.callback_query(F.data == "material")
async def switch_material(callback: types.CallbackQuery):
    await callback.message.delete()

    switch = ["OFF","ON"]
    result = parc.admin_material_switch()

    await callback.message.answer(f"–§—É–Ω–∫—Ü–∏—è (–†—ã–Ω–æ–∫ –°—ã—Ä—å—è‚õèÔ∏è) –∏–∑–º–µ–Ω–∏–ª–∞ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ <u><b>{switch[int(result)]}</b></u>üíª",
    parse_mode="HTML",reply_markup=keyboards.admin_panel)
    
@router.callback_query(F.data == "crypto")
async def switch_crypto(callback: types.CallbackQuery):
    await callback.message.delete()

    switch = ["OFF", "ON"]
    result = parc.admin_crypto_switch()

    await callback.message.answer(f"–§—É–Ω–∫—Ü–∏—è (–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ ‚Çø) –∏–∑–º–µ–Ω–∏–ª–∞ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ <u><b>{switch[int(result)]}</b></u>üíª",
    parse_mode="HTML",reply_markup=keyboards.admin_panel)

@router.callback_query(F.data == "index")
async def switch_index(callback: types.CallbackQuery):
    await callback.message.delete()

    switch = ["OFF","ON"]
    result = parc.admin_index_switch()

    await callback.message.answer(f"–§—É–Ω–∫—Ü–∏—è (–ò–Ω–¥–µ–∫—Å—ã –±–∏—Ä–∂üìäüìà) –∏–∑–º–µ–Ω–∏–ª–∞ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ <u><b>{switch[int(result)]}</b></u>üíª",
    parse_mode="HTML",reply_markup=keyboards.admin_panel)


#################################################################

#0.4 version