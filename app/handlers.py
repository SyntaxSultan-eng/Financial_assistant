from aiogram import types, Router,F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import LinkPreviewOptions

import app.keyboard as keyboards
import app.parcer as parc
import datetime

#############################################

router = Router()

class Form(StatesGroup):
    need_currency = State()


##################### –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ########################

@router.message(Command('start'))
async def start_menu(message: types.Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n'
        f'–≠—Ç–æ—Ç –±–æ—Ç –¥–æ–ª–∂–µ–Ω —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ –≤–∞–ª—é—Ç.\n–û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–∞–º!',
        reply_markup=keyboards.main_keyboard
    )

@router.message(Command("stocks"))
@router.message(F.text == '–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–πüåê')
async def Market_stocks(message: types.Message):
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–∑ –º–∏—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?‚úç",reply_markup=keyboards.stocks_keyboard)

@router.message(Command("menu"))
@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©")
async def return_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –í–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüë®üèª‚Äçüíª", reply_markup=keyboards.main_keyboard)

@router.message(Command('cancel'))
async def choose_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—åüíÄ", reply_markup=keyboards.main_keyboard)
        return
    
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚õî",reply_markup=keyboards.main_keyboard)

################# –ö—É—Ä—Å –≤–∞–ª—é—Ç(–¶–ë –†–§)üèõÔ∏è############################

############## –ú–∏—Ä–æ–≤—ã–µ –í–∞–ª—é—Ç—ã################# 

@router.message(Command('currency'))
@router.message(F.text == '–ö—É—Ä—Å –≤–∞–ª—é—Ç(–¶–ë –†–§)üèõÔ∏è')
async def world_currency(message: types.Message):
    info_world_currency = parc.get_all_currency()
    for item in info_world_currency:
        '''
        —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ info_world_currency
        [['840', 'USD', '1', '–î–æ–ª–ª–∞—Ä –°–®–ê', '87,9595'],...]
        '''
        —Åurrency_codename = item[1]
        currency_nums = item[2]
        currency_name = item[3]
        currency_value = item[4]
        

        await message.answer(f"üíµ{currency_nums} {—Åurrency_codename} (<b>{currency_name}</b>) ‚Äî <u><b>{currency_value}‚ÇΩ</b></u>",
        reply_markup=keyboards.main_keyboard,parse_mode="HTML")


#################################################################

################# –†—ã–Ω–æ–∫ –∞–∫—Ü–∏–πüåê ################################

@router.message(F.text == "–í–∑–ª–µ—Ç—ã –¥–Ω—èüíπ")
async def give_up_stocks(message: types.Message):
    info_stocks = parc.growth_stocks()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    for stock in info_stocks:
        Code_name = stock[0][:4]
        Full_name = stock[0][4:]
        Change_percent = stock[1]
        Price = stock[2]
        Subject = stock[10]
        await message.answer(f'(<b>{Code_name}</b>) {Full_name} ({Subject}) -> \n\n'
        f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –Ω–∞ <u><b>{Change_percent}</b></u>‚Üó -> \n\n<u>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>{Price}</b></u>', parse_mode="HTML")

    await message.answer(f"üòé–í–æ—Ç –ø–µ—Ä–≤—ã–µ <u><b>10</b></u> –ø–æ–∑–∏—Ü–∏–π –≤ –ª–∏–¥–µ—Ä–∞—Ö —Ä–æ—Å—Ç–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}",reply_markup=keyboards.stocks_keyboard,parse_mode="HTML")

@router.message(F.text == '–ü–∞–¥–µ–Ω–∏—è –¥–Ω—èüìâ')
async def give_down_stocks(message: types.Message):
    inf_stock = parc.drop_stocks()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    for stock in inf_stock:
        Code_name = stock[0][:4]
        Full_name = stock[0][4:]
        Change_percent = stock[1]
        Price = stock[2]
        Subject = stock[10]
        await message.answer(f'(<b>{Code_name}</b>) {Full_name} ({Subject}) -> \n\n'
        f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –Ω–∞ <u><b>{Change_percent}</b></u>‚¨á -> \n\n<u>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>{Price}</b></u>', parse_mode="HTML")

    await message.answer(f"üòí–í–æ—Ç –ø–µ—Ä–≤—ã–µ <u><b>10</b></u> –ø–æ–∑–∏—Ü–∏–π –≤ –ª–∏–¥–µ—Ä–∞—Ö –ø–∞–¥–µ–Ω–∏—è„ÄΩ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}",reply_markup=keyboards.stocks_keyboard,parse_mode="HTML")


################## –°—ã—Ä—å–µ ########################################

@router.message(F.text == "–†—ã–Ω–æ–∫ –°—ã—Ä—å—è‚õèÔ∏è")
async def menu_material(message: types.Message):
    await message.answer("–ö–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –î–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ <u><b>–§—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö</b></u>", 
        reply_markup=keyboards.material_keyboard, parse_mode="HTML")

@router.message(F.text =="–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞‚ö°")
async def get_energy(message: types.Message):
    energy_data = parc.energy()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    for info_list in energy_data:
        name = info_list[0]
        price,change_day,percent = info_list[1]

        await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ <u>{name.capitalize()}</u> –∑–∞ –¥–µ–Ω—å <u>–∏–∑–º–µ–Ω–∏–ª–∞—Å—å</u> –Ω–∞ <b>{change_day}$</b> (<u><b>{percent}</b></u>)."
            f"->\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - <u><b>{price}$</b></u>", parse_mode="HTML")
    await message.answer(f"–í–æ—Ç <u><b>6</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å—ë –≤ <u>—Å—Ñ–µ—Ä–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏</u> –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.\n\n–í—Å–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö$$$",
        reply_markup=keyboards.material_keyboard,parse_mode="HTML")

@router.message(F.text == "–ú–µ—Ç–∞–ª–ª—ãüî©")
async def get_metall(message: types.Message):
    metall_data = parc.metall()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    for info_list in metall_data:
        name = info_list[0]
        price,change_day,percent = info_list[1]

        await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ <u>{name.capitalize()}</u> –∑–∞ –¥–µ–Ω—å <u>–∏–∑–º–µ–Ω–∏–ª–∞—Å—å</u> –Ω–∞ <b>{change_day}$</b> (<u><b>{percent}</b></u>)."
            f"->\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - <u><b>{price}$</b></u>", parse_mode="HTML")
    await message.answer(f"–í–æ—Ç <u><b>5</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å—ë –≤ <u>—Å—Ñ–µ—Ä–µ –º–µ—Ç–∞–ª–ª–æ–≤</u> –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.\n\n–í—Å–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö$$$",
        reply_markup=keyboards.material_keyboard,parse_mode="HTML")

@router.message(F.text == "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑. üå±")
async def get_agriculture(message: types.Message):
    agriculture_data = parc.agriculture()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    for info_list in agriculture_data:
        name = info_list[0]
        price,change_day,percent = info_list[1]

        await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ <u>{name.capitalize()}</u> –∑–∞ –¥–µ–Ω—å <u>–∏–∑–º–µ–Ω–∏–ª–∞—Å—å</u> –Ω–∞ <b>{change_day}$</b> (<u><b>{percent}</b></u>)."
            f"->\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - <u><b>{price}$</b></u>", parse_mode="HTML")
    await message.answer(f"–í–æ—Ç <u><b>6</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å—ë –≤ <u>—Å—Ñ–µ—Ä–µ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞</u> –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.\n\n–í—Å–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö$$$",
        reply_markup=keyboards.material_keyboard,parse_mode="HTML")

@router.message(F.text == "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å‚öôÔ∏è")
async def get_industry(message: types.Message):
    industry_data = parc.industry()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    
    for info_list in industry_data:
        name = info_list[0]
        price,change_day,percent = info_list[1]

        await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ <u>{name.capitalize()}</u> –∑–∞ –¥–µ–Ω—å <u>–∏–∑–º–µ–Ω–∏–ª–∞—Å—å</u> –Ω–∞ <b>{change_day}$</b> (<u><b>{percent}</b></u>)."
            f"->\n\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - <u><b>{price}$</b></u>", parse_mode="HTML")
    await message.answer(f"–í–æ—Ç <u><b>6</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å—ë –≤ <u>—Å—Ñ–µ—Ä–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏</u> –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}.\n\n–í—Å–µ —Ü–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö$$$",
        reply_markup=keyboards.material_keyboard,parse_mode="HTML")
    
#################################################################

################# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìú ################################

@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìú")
async def get_info(message : types.Message):
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ç-–ø—Ä–æ–µ–∫—Ç. –•–æ—Ç–µ–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É —Ä—ã–Ω–∫—É –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n\n"
    "github —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - <u>https://github.com/SyntaxSultan-eng</u> (–ü–æ–∫–∞ —Ç–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–æ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è)", reply_markup=keyboards.Information_kb, parse_mode="HTML")

@router.message(F.text == "–í–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ü§ñ")
async def versions(message: types.Message):
    await message.answer("–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - <u><b>0.1.1version</b></u> (–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: 12.08.2024  18:19)\n\n–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ - <u><b>0.1version</b></u> (–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: 12.07.2024  20:46)",reply_markup=keyboards.main_keyboard,parse_mode="HTML")

#################################################################

#0.1.1 version