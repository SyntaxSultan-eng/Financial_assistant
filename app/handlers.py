from aiogram import types, Router,F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import LinkPreviewOptions

import app.keyboard as keyboards
import app.parcer as parc
import datetime

#############################################

router = Router()

class Form(StatesGroup):
    need_currency = State()


##################### –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ########################

@router.message(Command('start'))
async def start_menu(message: types.Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n'
        f'–≠—Ç–æ—Ç –±–æ—Ç –¥–æ–ª–∂–µ–Ω —É–ø—Ä–æ—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ –≤–∞–ª—é—Ç.\n–û—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –ø–æ –∫–Ω–æ–ø–∫–∞–º!',
        reply_markup=keyboards.main_keyboard
    )
@router.message(Command('currency'))
@router.message(F.text == '–ö—É—Ä—Å –≤–∞–ª—é—Ç(–¶–ë –†–§)üèõÔ∏è')
async def currency(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º.", reply_markup=keyboards.setting_currency)

@router.message(F.text == '–†—ã–Ω–æ–∫ –∞–∫—Ü–∏–πüåê')
async def Market_stocks(message: types.Message):
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∏–∑ –º–∏—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?‚úç",reply_markup=keyboards.stocks_keyboard)

@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©")
async def return_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –í–∞—Å –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüë®üèª‚Äçüíª", reply_markup=keyboards.main_keyboard)

@router.message(Command('cancel'))
async def choose_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—åüíÄ", reply_markup=keyboards.main_keyboard)
        return
    
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚õî",reply_markup=keyboards.main_keyboard)

################# –ö—É—Ä—Å –≤–∞–ª—é—Ç(–¶–ë –†–§)üèõÔ∏è############################

################### –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ ###########################
@router.callback_query(F.data == 'True_info')
async def correction(callback: types.CallbackQuery, state: FSMContext):
    options_1 = LinkPreviewOptions(is_disabled=True)
    user_data = await state.get_data()

    #–ë–ª–æ–∫ –∫–æ–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–º–∞–Ω–¥–æ–π cancel
    if len(user_data) == 0:
        await callback.message.delete()
        return

    await callback.message.delete()
    await callback.message.answer("–•–º–º–º... –ó–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —á–∞—Å—Ç–∏. –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–±–∏–ª—É-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @Senior_kartofan –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ.üõ†Ô∏è")
    await callback.message.answer(f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –≤–∞–ª—é—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: https://yandex.ru/search/?text={user_data['need_currency']}",
    reply_markup=keyboards.main_keyboard, link_preview_options=options_1)

    await state.clear()

@router.callback_query(F.data == 'False_info')
async def testing(callback: types.CallbackQuery, state:FSMContext):
    user_data = await state.get_data()

    #–ë–ª–æ–∫ –∫–æ–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–º–∞–Ω–¥–æ–π cancel
    if len(user_data) == 0:
        await callback.message.delete()
        return
    
    await callback.message.delete()
    await callback.message.answer("–†–µ—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞.ü§ì‚òùÔ∏è –ü–æ—Ö–≤–∞–ª—å–Ω–æ!",reply_markup=keyboards.main_keyboard)

    await state.clear()

@router.callback_query(F.data == 'Right_info')
async def good_end(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    #–ë–ª–æ–∫ –∫–æ–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–º–∞–Ω–¥–æ–π cancel
    if len(user_data) == 0:
        await callback.message.delete()
        return
    
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ!üòé", reply_markup=keyboards.main_keyboard)

    await state.clear()

@router.callback_query(F.data == 'Lie_info')
async def bad_end(callback: types.CallbackQuery, state: FSMContext):
    options_1 = LinkPreviewOptions(is_disabled=True)
    user_data = await state.get_data()

    #–ë–ª–æ–∫ –∫–æ–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–º–∞–Ω–¥–æ–π cancel
    if len(user_data) == 0:
        await callback.message.delete()
        return

    await callback.message.delete()
    await callback.message.answer("–•–º–º–º... –ó–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —á–∞—Å—Ç–∏. –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–±–∏–ª—É-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @Senior_kartofan –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ.üõ†Ô∏è")
    await callback.message.answer(f"üòé–¢–æ–≥–¥–∞ –≤–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –≤–∞–ª—é—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: https://yandex.ru/search/?text={user_data['need_currency']}",
    reply_markup=keyboards.main_keyboard, link_preview_options=options_1)

    await state.clear()

@router.callback_query(F.data == 'need_currency')
async def find_currency(callback: types.CallbackQuery,state: FSMContext):
    await callback.message.delete()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞–ª—é—Ç—É.\n\n"\
    "–ü—Ä–∞–≤–∏–ª–æ –≤–≤–æ–¥–∞: 1)‚ùó–ñ–ï–õ–ê–¢–ï–õ–¨–ù–û‚ùó –≤–≤–æ–¥–∏—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.\n\n"\
    "2)–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞üëç: –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä\n\n"\
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ!üîé")
    await state.set_state(Form.need_currency)

@router.message(Form.need_currency)
async def print_currency(message: types.Message, state: FSMContext):

    await state.update_data(need_currency=message.text)
    value = parc.get_currency(f"https://yandex.ru/search/?text={message.text}+–∫+—Ä—É–±–ª—é")

    if value == 'error':
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.üò± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –í—ã —Ç–æ—á–Ω–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–ª—é—Ç—É?",reply_markup=keyboards.checkingNONE_inline_kb)
    else:
        await message.answer(value)
        await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º?",reply_markup=keyboards.checking_inline_kb)

############## –ú–∏—Ä–æ–≤—ã–µ –í–∞–ª—é—Ç—ã################# 

@router.callback_query(F.data == "world_currency")
async def world_currency(callback: types.CallbackQuery):
    await callback.message.delete()
    info_world_currency = parc.get_all_currency()
    for item in info_world_currency:
        '''
        —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ info_world_currency
        [['840', 'USD', '1', '–î–æ–ª–ª–∞—Ä –°–®–ê', '87,9595'],...]
        '''
        —Åurrency_codename = item[1]
        currency_nums = item[2]
        currency_name = item[3]
        currency_value = item[4]
        

        await callback.message.answer(f"üíµ{currency_nums} {—Åurrency_codename} ({currency_name}) - {currency_value}‚ÇΩ",
        reply_markup=keyboards.main_keyboard)


#################################################################

################# –†—ã–Ω–æ–∫ –∞–∫—Ü–∏–πüåê ################################

@router.message(F.text == "–í–∑–ª–µ—Ç—ã –¥–Ω—èüíπ")
async def give_up_stocks(message: types.Message):
    info_stocks = parc.growth_stocks()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    for stock in info_stocks:
        Code_name = stock[0][:4]
        Full_name = stock[0][4:]
        Change_percent = stock[1]
        Price = stock[2]
        Subject = stock[10]
        await message.answer(f'(<b>{Code_name}</b>) {Full_name} ({Subject}) -> \n\n'
        f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –Ω–∞ <u><b>{Change_percent}</b></u>‚Üó -> \n\n<u>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>{Price}</b></u>', parse_mode="HTML")

    await message.answer(f"üòé–í–æ—Ç –ø–µ—Ä–≤—ã–µ <u><b>10</b></u> –ø–æ–∑–∏—Ü–∏–π –≤ –ª–∏–¥–µ—Ä–∞—Ö —Ä–æ—Å—Ç–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}",reply_markup=keyboards.stocks_keyboard,parse_mode="HTML")

@router.message(F.text == '–ü–∞–¥–µ–Ω–∏—è –¥–Ω—èüìâ')
async def give_down_stocks(message: types.Message):
    inf_stock = parc.drop_stocks()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    for stock in inf_stock:
        Code_name = stock[0][:4]
        Full_name = stock[0][4:]
        Change_percent = stock[1]
        Price = stock[2]
        Subject = stock[10]
        await message.answer(f'(<b>{Code_name}</b>) {Full_name} ({Subject}) -> \n\n'
        f'–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –Ω–∞ <u><b>{Change_percent}</b></u>‚¨á -> \n\n<u>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ <b>{Price}</b></u>', parse_mode="HTML")

    await message.answer(f"üòí–í–æ—Ç –ø–µ—Ä–≤—ã–µ <u><b>10</b></u> –ø–æ–∑–∏—Ü–∏–π –≤ –ª–∏–¥–µ—Ä–∞—Ö –ø–∞–¥–µ–Ω–∏—è„ÄΩ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}",reply_markup=keyboards.stocks_keyboard,parse_mode="HTML")


################## –°—ã—Ä—å–µ ########################################

@router.message(F.text == "–†—ã–Ω–æ–∫ –°—ã—Ä—å—è‚õèÔ∏è")
async def menu_material(message: types.Message):
    await message.answer("–ö–∞–∫–æ–π —Å–µ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboards.material_keyboard)

@router.message(F.text =="–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞‚ö°")
async def get_energy(message: types.Message):
    energy_data = parc.energy()
    current_time = datetime.datetime.now().strftime("%H:%M:%S")

    for info_list in energy_data:
        name = info_list[0]
        price,change_day,percent = info_list[1]

        await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ '{name.capitalize()}' –∑–∞ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ {change_day}({percent}).\n\n–¶–µ–Ω–∞ {name.capitalize()} - {price}")
    await message.answer(f"–í–æ—Ç <u><b>6</b></u> –ø–æ–∑–∏—Ü–∏–π —Ü–µ–Ω –Ω–∞ —Å—ã—Ä—å—ë –≤ —Å—Ñ–µ—Ä–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {current_time}",reply_markup=keyboards.material_keyboard,parse_mode="HTML")

###################################################################